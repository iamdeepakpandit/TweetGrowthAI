{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nTweetBot AI is a comprehensive automated Twitter/X account management platform built with React and Express. The application enables users to generate AI-powered content, schedule tweets, track analytics, and grow their Twitter presence through intelligent automation. It features a secure multi-tenant architecture with Replit authentication, allowing multiple users to safely connect and manage their Twitter accounts.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript running on Vite\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Replit OpenID Connect with session-based auth\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Content Generation**: OpenAI GPT-4o integration for tweet creation\n- **Scheduling**: Node-cron for automated tweet posting\n- **Twitter Integration**: Twitter API v2 for posting and account management\n\n## Database Design\n- **Users**: Profile information and authentication data\n- **Twitter Accounts**: Connected social media accounts with OAuth tokens\n- **Content Topics**: Predefined and custom content categories\n- **Tweets**: Generated content with scheduling and status tracking\n- **Analytics**: Performance metrics and engagement data\n- **Sessions**: Secure session management for authenticated users\n\n## Key Features Architecture\n- **AI Content Generation**: Topic-based tweet creation with style and length customization\n- **Smart Scheduling**: Automated posting with timezone handling and optimal timing\n- **Multi-Account Support**: Users can manage multiple Twitter accounts\n- **Content Queue Management**: Draft, approve, and schedule tweet workflows\n- **Performance Tracking**: Engagement metrics and growth analytics\n\n## Security Considerations\n- **Token Management**: Encrypted storage of Twitter OAuth tokens with refresh capability\n- **Session Security**: HTTP-only cookies with CSRF protection\n- **Input Validation**: Zod schemas for all API endpoints\n- **Rate Limiting**: Built-in protection for external API calls\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle Kit**: Database migrations and schema management\n\n## AI and Content Services\n- **OpenAI API**: GPT-4o model for intelligent tweet generation\n- **Twitter API v2**: Social media posting and account data retrieval\n\n## Authentication and Security\n- **Replit Auth**: OpenID Connect authentication provider\n- **Passport.js**: Authentication middleware and strategy management\n\n## Utility Services\n- **Node-cron**: Scheduled task execution for automated posting\n- **Date-fns**: Date manipulation and timezone handling\n- **Memoizee**: Function result caching for performance optimization\n\n## Development Tools\n- **TypeScript**: Type safety across the full stack\n- **ESBuild**: Fast production bundling\n- **Vite**: Development server with hot module replacement","size_bytes":3375},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { generateTweetContent, generateMultipleTweets } from \"./services/openai\";\nimport { googleService } from \"./services/google\";\nimport { facebookService } from \"./services/facebook\";\nimport { schedulerService } from \"./services/scheduler\";\nimport { insertTwitterAccountSchema, insertTweetSchema, insertUserTopicSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Initialize default content topics\n  await initializeContentTopics();\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Social Account Routes\n  app.get('/api/social/accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accounts = await storage.getSocialAccountsByUserId(userId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching social accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch social accounts\" });\n    }\n  });\n\n  // Google OAuth Routes\n  app.get('/api/google/auth-url', isAuthenticated, async (req: any, res) => {\n    try {\n      const clientId = process.env.GOOGLE_CLIENT_ID;\n      const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n      \n      if (!clientId || !clientSecret) {\n        console.error(\"Google OAuth credentials not configured\");\n        return res.status(500).json({ \n          message: \"Google OAuth credentials not configured. Please add GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET to your environment variables.\" \n        });\n      }\n\n      const userId = req.user.claims.sub;\n      const authUrl = googleService.generateAuthUrl(userId);\n      console.log(\"Generated Google auth URL for user:\", userId);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error(\"Error generating Google auth URL:\", error);\n      res.status(500).json({ message: \"Failed to generate auth URL\" });\n    }\n  });\n\n  app.get('/api/google/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n      const userId = state as string;\n\n      console.log(\"Google callback received:\", { code: !!code, state: userId, error });\n\n      if (error) {\n        console.error(\"Google OAuth error:\", error);\n        return res.redirect(`/?error=google_oauth_error&details=${encodeURIComponent(error as string)}`);\n      }\n\n      if (!code || !userId) {\n        console.error(\"Missing code or state parameter\", { code: !!code, userId: !!userId });\n        return res.redirect(`/?error=missing_parameters`);\n      }\n\n      console.log(\"Exchanging code for tokens for user:\", userId);\n      const tokens = await googleService.exchangeCodeForTokens(code as string, userId);\n      \n      console.log(\"Getting user profile...\");\n      const profile = await googleService.getUserProfile(tokens.access_token);\n      console.log(\"Got profile for user:\", profile.email);\n\n      // Store the account in the database\n      await storage.createSocialAccount({\n        userId,\n        provider: 'google',\n        providerId: profile.id,\n        username: profile.name,\n        email: profile.email,\n        profileImageUrl: profile.picture,\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        tokenExpiresAt: new Date(Date.now() + tokens.expires_in * 1000),\n      });\n\n      console.log(\"Connected Google account:\", profile.email);\n\n      res.redirect(`/?connected=true&provider=google`);\n    } catch (error) {\n      console.error(\"Error in Google callback:\", error);\n      res.redirect(`/?error=google_connection_failed&details=${encodeURIComponent(error instanceof Error ? error.message : 'Unknown error')}`);\n    }\n  });\n\n  // Facebook OAuth Routes\n  app.get('/api/facebook/auth-url', isAuthenticated, async (req: any, res) => {\n    try {\n      const clientId = process.env.FACEBOOK_APP_ID;\n      const clientSecret = process.env.FACEBOOK_APP_SECRET;\n      \n      if (!clientId || !clientSecret) {\n        console.error(\"Facebook OAuth credentials not configured\");\n        return res.status(500).json({ \n          message: \"Facebook OAuth credentials not configured. Please add FACEBOOK_APP_ID and FACEBOOK_APP_SECRET to your environment variables.\" \n        });\n      }\n\n      const userId = req.user.claims.sub;\n      const authUrl = facebookService.generateAuthUrl(userId);\n      console.log(\"Generated Facebook auth URL for user:\", userId);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error(\"Error generating Facebook auth URL:\", error);\n      res.status(500).json({ message: \"Failed to generate auth URL\" });\n    }\n  });\n\n  app.get('/api/facebook/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n      const userId = state as string;\n\n      console.log(\"Facebook callback received:\", { code: !!code, state: userId, error });\n\n      if (error) {\n        console.error(\"Facebook OAuth error:\", error);\n        return res.redirect(`/?error=facebook_oauth_error&details=${encodeURIComponent(error as string)}`);\n      }\n\n      if (!code || !userId) {\n        console.error(\"Missing code or state parameter\", { code: !!code, userId: !!userId });\n        return res.redirect(`/?error=missing_parameters`);\n      }\n\n      console.log(\"Exchanging code for tokens for user:\", userId);\n      const tokens = await facebookService.exchangeCodeForTokens(code as string, userId);\n      \n      console.log(\"Getting user profile...\");\n      const profile = await facebookService.getUserProfile(tokens.access_token);\n      console.log(\"Got profile for user:\", profile.email);\n\n      // Store the account in the database\n      await storage.createSocialAccount({\n        userId,\n        provider: 'facebook',\n        providerId: profile.id,\n        username: profile.name,\n        email: profile.email,\n        profileImageUrl: profile.picture?.data?.url,\n        accessToken: tokens.access_token,\n        tokenExpiresAt: new Date(Date.now() + tokens.expires_in * 1000),\n      });\n\n      console.log(\"Connected Facebook account:\", profile.email);\n\n      res.redirect(`/?connected=true&provider=facebook`);\n    } catch (error) {\n      console.error(\"Error in Facebook callback:\", error);\n      res.redirect(`/?error=facebook_connection_failed&details=${encodeURIComponent(error instanceof Error ? error.message : 'Unknown error')}`);\n    }\n  });\n\n  // Content Topics Routes\n  app.get('/api/content-topics', isAuthenticated, async (req, res) => {\n    try {\n      const topics = await storage.getAllContentTopics();\n      res.json(topics);\n    } catch (error) {\n      console.error(\"Error fetching content topics:\", error);\n      res.status(500).json({ message: \"Failed to fetch content topics\" });\n    }\n  });\n\n  app.get('/api/user-topics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userTopics = await storage.getUserTopics(userId);\n      res.json(userTopics);\n    } catch (error) {\n      console.error(\"Error fetching user topics:\", error);\n      res.status(500).json({ message: \"Failed to fetch user topics\" });\n    }\n  });\n\n  app.post('/api/user-topics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topicIds } = req.body;\n      \n      if (!Array.isArray(topicIds)) {\n        return res.status(400).json({ message: \"topicIds must be an array\" });\n      }\n\n      await storage.setUserTopics(userId, topicIds);\n      const updatedTopics = await storage.getUserTopics(userId);\n      \n      res.json(updatedTopics);\n    } catch (error) {\n      console.error(\"Error updating user topics:\", error);\n      res.status(500).json({ message: \"Failed to update user topics\" });\n    }\n  });\n\n  // Content Generation Routes\n  app.post('/api/generate-content', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { topicIds, style, length, includeHashtags, includeEmojis, count = 1 } = req.body;\n\n      // Get topic names\n      const userTopics = await storage.getUserTopics(userId);\n      const selectedTopics = userTopics\n        .filter(ut => topicIds?.includes(ut.topicId))\n        .map(ut => ut.topic.name);\n\n      if (selectedTopics.length === 0) {\n        return res.status(400).json({ message: \"No valid topics selected\" });\n      }\n\n      const options = {\n        topics: selectedTopics,\n        style,\n        length,\n        includeHashtags,\n        includeEmojis,\n      };\n\n      let generatedContent;\n      if (count > 1) {\n        generatedContent = await generateMultipleTweets(options, count);\n      } else {\n        generatedContent = [await generateTweetContent(options)];\n      }\n\n      res.json({ content: generatedContent });\n    } catch (error) {\n      console.error(\"Error generating content:\", error);\n      res.status(500).json({ message: \"Failed to generate content\" });\n    }\n  });\n\n  // Tweet Routes\n  app.get('/api/tweets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { status } = req.query;\n      \n      let tweets;\n      if (status) {\n        tweets = await storage.getTweetsByStatus(userId, status as string);\n      } else {\n        tweets = await storage.getTweetsByUserId(userId);\n      }\n      \n      res.json(tweets);\n    } catch (error) {\n      console.error(\"Error fetching tweets:\", error);\n      res.status(500).json({ message: \"Failed to fetch tweets\" });\n    }\n  });\n\n  app.post('/api/tweets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const tweetData = insertTweetSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const tweet = await storage.createTweet(tweetData);\n      res.json(tweet);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid tweet data\", errors: error.errors });\n      }\n      console.error(\"Error creating tweet:\", error);\n      res.status(500).json({ message: \"Failed to create tweet\" });\n    }\n  });\n\n  app.patch('/api/tweets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const tweet = await storage.updateTweet(id, updates);\n      if (!tweet) {\n        return res.status(404).json({ message: \"Tweet not found\" });\n      }\n      \n      res.json(tweet);\n    } catch (error) {\n      console.error(\"Error updating tweet:\", error);\n      res.status(500).json({ message: \"Failed to update tweet\" });\n    }\n  });\n\n  app.post('/api/tweets/:id/post-now', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await schedulerService.scheduleImmediatePost(id);\n      res.json({ message: \"Tweet scheduled for immediate posting\" });\n    } catch (error) {\n      console.error(\"Error scheduling immediate post:\", error);\n      res.status(500).json({ message: \"Failed to schedule tweet\" });\n    }\n  });\n\n  // Social account disconnect route\n  app.delete('/api/social/accounts/:provider/:accountId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { provider, accountId } = req.params;\n      const userId = req.user.claims.sub;\n\n      // Verify the account belongs to the user\n      const account = await storage.getSocialAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n\n      await storage.deleteSocialAccount(provider, accountId);\n      res.json({ message: \"Account disconnected successfully\" });\n    } catch (error) {\n      console.error(\"Error disconnecting social account:\", error);\n      res.status(500).json({ message: \"Failed to disconnect account\" });\n    }\n  });\n\n  // Analytics Routes\n  app.get('/api/analytics/:twitterAccountId', isAuthenticated, async (req, res) => {\n    try {\n      const { twitterAccountId } = req.params;\n      const { startDate, endDate } = req.query;\n      \n      const analytics = await storage.getAnalyticsByTwitterAccount(\n        twitterAccountId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      \n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get('/api/dashboard-stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get user's social accounts\n      const socialAccounts = await storage.getSocialAccountsByUserId(userId);\n      const twitterAccounts = await storage.getTwitterAccountsByUserId(userId);\n      \n      if (socialAccounts.length === 0 && twitterAccounts.length === 0) {\n        return res.json({\n          followerCount: 0,\n          engagementRate: 0,\n          tweetsThisMonth: 0,\n          pendingApprovals: 0,\n        });\n      }\n\n      // Get tweets\n      const allTweets = await storage.getTweetsByUserId(userId);\n      const pendingTweets = await storage.getTweetsByStatus(userId, 'draft');\n      \n      // Calculate this month's tweets\n      const thisMonth = new Date();\n      thisMonth.setDate(1);\n      thisMonth.setHours(0, 0, 0, 0);\n      \n      const tweetsThisMonth = allTweets.filter(tweet => \n        tweet.createdAt && new Date(tweet.createdAt) >= thisMonth\n      ).length;\n\n      // Get primary account stats (prefer Twitter, fallback to social accounts)\n      let followerCount = 0;\n      let engagementRate = 0;\n\n      if (twitterAccounts.length > 0) {\n        const primaryAccount = twitterAccounts[0];\n        const latestAnalytics = await storage.getLatestAnalytics(primaryAccount.id);\n        followerCount = primaryAccount.followerCount || 0;\n        engagementRate = latestAnalytics?.engagementRate || 0;\n      } else if (socialAccounts.length > 0) {\n        const primaryAccount = socialAccounts[0];\n        followerCount = primaryAccount.followerCount || 0;\n      }\n      \n      res.json({\n        followerCount,\n        engagementRate,\n        tweetsThisMonth,\n        pendingApprovals: pendingTweets.length,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nasync function initializeContentTopics() {\n  try {\n    const existingTopics = await storage.getAllContentTopics();\n    \n    if (existingTopics.length === 0) {\n      const defaultTopics = [\n        { name: 'Technology', icon: 'fas fa-laptop-code', description: 'Latest tech trends, programming, and software development' },\n        { name: 'Business', icon: 'fas fa-chart-line', description: 'Business insights, entrepreneurship, and industry news' },\n        { name: 'Innovation', icon: 'fas fa-lightbulb', description: 'Breakthrough innovations and cutting-edge ideas' },\n        { name: 'Movies', icon: 'fas fa-film', description: 'Film reviews, movie news, and entertainment' },\n        { name: 'News', icon: 'fas fa-newspaper', description: 'Current events and trending news topics' },\n        { name: 'Science', icon: 'fas fa-atom', description: 'Scientific discoveries and research' },\n        { name: 'Health', icon: 'fas fa-heart', description: 'Health tips, wellness, and medical news' },\n        { name: 'Education', icon: 'fas fa-graduation-cap', description: 'Learning resources and educational content' },\n      ];\n\n      for (const topic of defaultTopics) {\n        await storage.createContentTopic(topic);\n      }\n      \n      console.log('Initialized default content topics');\n    }\n  } catch (error) {\n    console.error('Error initializing content topics:', error);\n  }\n}\n","size_bytes":16365},"server/storage.ts":{"content":"import {\n  users,\n  twitterAccounts,\n  socialAccounts,\n  contentTopics,\n  userTopics,\n  tweets,\n  analytics,\n  type User,\n  type UpsertUser,\n  type TwitterAccount,\n  type InsertTwitterAccount,\n  type SocialAccount,\n  type InsertSocialAccount,\n  type ContentTopic,\n  type InsertContentTopic,\n  type UserTopic,\n  type InsertUserTopic,\n  type Tweet,\n  type InsertTweet,\n  type Analytics,\n  type InsertAnalytics,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Twitter account operations\n  getTwitterAccountsByUserId(userId: string): Promise<TwitterAccount[]>;\n  createTwitterAccount(account: InsertTwitterAccount): Promise<TwitterAccount>;\n  updateTwitterAccount(id: string, updates: Partial<InsertTwitterAccount>): Promise<TwitterAccount | undefined>;\n  getTwitterAccountById(id: string): Promise<TwitterAccount | undefined>;\n\n  // Content topics operations\n  getAllContentTopics(): Promise<ContentTopic[]>;\n  createContentTopic(topic: InsertContentTopic): Promise<ContentTopic>;\n  getUserTopics(userId: string): Promise<(UserTopic & { topic: ContentTopic })[]>;\n  setUserTopics(userId: string, topicIds: string[]): Promise<void>;\n\n  // Tweet operations\n  createTweet(tweet: InsertTweet): Promise<Tweet>;\n  getTweetsByUserId(userId: string): Promise<Tweet[]>;\n  getTweetsByStatus(userId: string, status: string): Promise<Tweet[]>;\n  updateTweet(id: string, updates: Partial<InsertTweet>): Promise<Tweet | undefined>;\n  getScheduledTweets(): Promise<Tweet[]>;\n  getTweetById(id: string): Promise<Tweet | undefined>;\n\n  // Social accounts operations\n  getSocialAccountsByUserId(userId: string): Promise<SocialAccount[]>;\n  createSocialAccount(account: InsertSocialAccount): Promise<SocialAccount>;\n  deleteSocialAccount(provider: string, accountId: string): Promise<void>;\n  getSocialAccountById(id: string): Promise<SocialAccount | undefined>;\n\n  // Analytics operations\n  createAnalytics(analytics: InsertAnalytics): Promise<Analytics>;\n  getAnalyticsByTwitterAccount(twitterAccountId: string, startDate?: Date, endDate?: Date): Promise<Analytics[]>;\n  getLatestAnalytics(twitterAccountId: string): Promise<Analytics | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - mandatory for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Twitter account operations\n  async getTwitterAccountsByUserId(userId: string): Promise<TwitterAccount[]> {\n    return await db\n      .select()\n      .from(twitterAccounts)\n      .where(eq(twitterAccounts.userId, userId))\n      .orderBy(desc(twitterAccounts.createdAt));\n  }\n\n  async createTwitterAccount(account: InsertTwitterAccount): Promise<TwitterAccount> {\n    const [twitterAccount] = await db\n      .insert(twitterAccounts)\n      .values(account)\n      .returning();\n    return twitterAccount;\n  }\n\n  async updateTwitterAccount(id: string, updates: Partial<InsertTwitterAccount>): Promise<TwitterAccount | undefined> {\n    const [updated] = await db\n      .update(twitterAccounts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(twitterAccounts.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getTwitterAccountById(id: string): Promise<TwitterAccount | undefined> {\n    const [account] = await db\n      .select()\n      .from(twitterAccounts)\n      .where(eq(twitterAccounts.id, id));\n    return account;\n  }\n\n  // Content topics operations\n  async getAllContentTopics(): Promise<ContentTopic[]> {\n    return await db\n      .select()\n      .from(contentTopics)\n      .where(eq(contentTopics.isActive, true))\n      .orderBy(contentTopics.name);\n  }\n\n  async createContentTopic(topic: InsertContentTopic): Promise<ContentTopic> {\n    const [created] = await db\n      .insert(contentTopics)\n      .values(topic)\n      .returning();\n    return created;\n  }\n\n  async getUserTopics(userId: string): Promise<(UserTopic & { topic: ContentTopic })[]> {\n    return await db\n      .select({\n        id: userTopics.id,\n        userId: userTopics.userId,\n        topicId: userTopics.topicId,\n        createdAt: userTopics.createdAt,\n        topic: contentTopics,\n      })\n      .from(userTopics)\n      .innerJoin(contentTopics, eq(userTopics.topicId, contentTopics.id))\n      .where(eq(userTopics.userId, userId));\n  }\n\n  async setUserTopics(userId: string, topicIds: string[]): Promise<void> {\n    // Delete existing topics\n    await db\n      .delete(userTopics)\n      .where(eq(userTopics.userId, userId));\n\n    // Insert new topics\n    if (topicIds.length > 0) {\n      const topicData = topicIds.map(topicId => ({\n        userId,\n        topicId,\n      }));\n      await db.insert(userTopics).values(topicData);\n    }\n  }\n\n  // Tweet operations\n  async createTweet(tweet: InsertTweet): Promise<Tweet> {\n    const [created] = await db\n      .insert(tweets)\n      .values(tweet)\n      .returning();\n    return created;\n  }\n\n  async getTweetsByUserId(userId: string): Promise<Tweet[]> {\n    return await db\n      .select()\n      .from(tweets)\n      .where(eq(tweets.userId, userId))\n      .orderBy(desc(tweets.createdAt));\n  }\n\n  async getTweetsByStatus(userId: string, status: string): Promise<Tweet[]> {\n    return await db\n      .select()\n      .from(tweets)\n      .where(and(eq(tweets.userId, userId), eq(tweets.status, status)))\n      .orderBy(desc(tweets.createdAt));\n  }\n\n  async updateTweet(id: string, updates: Partial<InsertTweet>): Promise<Tweet | undefined> {\n    const [updated] = await db\n      .update(tweets)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tweets.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getScheduledTweets(): Promise<Tweet[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(tweets)\n      .where(and(\n        eq(tweets.status, 'scheduled'),\n        eq(tweets.approvalStatus, 'approved'),\n        lte(tweets.scheduledFor, now)\n      ))\n      .orderBy(tweets.scheduledFor);\n  }\n\n  async getTweetById(id: string): Promise<Tweet | undefined> {\n    const [tweet] = await db\n      .select()\n      .from(tweets)\n      .where(eq(tweets.id, id));\n    return tweet;\n  }\n\n  // Analytics operations\n  async createAnalytics(analyticsData: InsertAnalytics): Promise<Analytics> {\n    const [created] = await db\n      .insert(analytics)\n      .values(analyticsData)\n      .returning();\n    return created;\n  }\n\n  async getAnalyticsByTwitterAccount(\n    twitterAccountId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<Analytics[]> {\n    let query = db\n      .select()\n      .from(analytics)\n      .where(eq(analytics.twitterAccountId, twitterAccountId));\n\n    if (startDate && endDate) {\n      query = db\n        .select()\n        .from(analytics)\n        .where(and(\n          eq(analytics.twitterAccountId, twitterAccountId),\n          gte(analytics.date, startDate),\n          lte(analytics.date, endDate)\n        ));\n    }\n\n    return await query.orderBy(desc(analytics.date));\n  }\n\n  async getLatestAnalytics(twitterAccountId: string): Promise<Analytics | undefined> {\n    const [latest] = await db\n      .select()\n      .from(analytics)\n      .where(eq(analytics.twitterAccountId, twitterAccountId))\n      .orderBy(desc(analytics.date))\n      .limit(1);\n    return latest;\n  }\n\n  // Social accounts operations\n  async getSocialAccountsByUserId(userId: string): Promise<SocialAccount[]> {\n    return await db\n      .select()\n      .from(socialAccounts)\n      .where(eq(socialAccounts.userId, userId))\n      .orderBy(desc(socialAccounts.createdAt));\n  }\n\n  async createSocialAccount(account: InsertSocialAccount): Promise<SocialAccount> {\n    const [created] = await db\n      .insert(socialAccounts)\n      .values(account)\n      .returning();\n    return created;\n  }\n\n  async deleteSocialAccount(provider: string, accountId: string): Promise<void> {\n    await db\n      .delete(socialAccounts)\n      .where(and(\n        eq(socialAccounts.provider, provider),\n        eq(socialAccounts.id, accountId)\n      ));\n  }\n\n  async getSocialAccountById(id: string): Promise<SocialAccount | undefined> {\n    const [account] = await db\n      .select()\n      .from(socialAccounts)\n      .where(eq(socialAccounts.id, id));\n    return account;\n  }\n\n  async getTwitterAccountById(accountId: string): Promise<TwitterAccount | undefined> {\n    const [account] = await db\n      .select()\n      .from(twitterAccounts)\n      .where(eq(twitterAccounts.id, accountId));\n    return account;\n  }\n\n  async deleteTwitterAccount(accountId: string): Promise<void> {\n    await db\n      .delete(twitterAccounts)\n      .where(eq(twitterAccounts.id, accountId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9265},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Twitter accounts connected by users\nexport const twitterAccounts = pgTable(\"twitter_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  twitterId: varchar(\"twitter_id\").notNull().unique(),\n  username: varchar(\"username\").notNull(),\n  displayName: varchar(\"display_name\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  followerCount: integer(\"follower_count\").default(0),\n  followingCount: integer(\"following_count\").default(0),\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\"),\n  tokenExpiresAt: timestamp(\"token_expires_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Add social accounts table\nexport const socialAccounts = pgTable(\"social_accounts\", {\n  id: text(\"id\").primaryKey().$defaultFn(() => crypto.randomUUID()),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(), // 'google', 'facebook', 'twitter'\n  providerId: text(\"provider_id\").notNull(),\n  username: text(\"username\"),\n  email: text(\"email\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\"),\n  tokenExpiresAt: timestamp(\"token_expires_at\"),\n  followerCount: integer(\"follower_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Content topics for AI generation\nexport const contentTopics = pgTable(\"content_topics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  icon: varchar(\"icon\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User selected topics\nexport const userTopics = pgTable(\"user_topics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  topicId: varchar(\"topic_id\").notNull().references(() => contentTopics.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Generated and scheduled tweets\nexport const tweets = pgTable(\"tweets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  twitterAccountId: varchar(\"twitter_account_id\").notNull().references(() => twitterAccounts.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  postedAt: timestamp(\"posted_at\"),\n  twitterTweetId: varchar(\"twitter_tweet_id\"),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, scheduled, posted, failed\n  approvalStatus: varchar(\"approval_status\").notNull().default(\"pending\"), // pending, approved, rejected\n  topics: jsonb(\"topics\"), // Array of topic IDs used for generation\n  aiPrompt: text(\"ai_prompt\"),\n  engagementData: jsonb(\"engagement_data\"), // likes, retweets, replies, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analytics data\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  twitterAccountId: varchar(\"twitter_account_id\").notNull().references(() => twitterAccounts.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  followerCount: integer(\"follower_count\").default(0),\n  followingCount: integer(\"following_count\").default(0),\n  tweetsCount: integer(\"tweets_count\").default(0),\n  engagementRate: real(\"engagement_rate\").default(0),\n  impressions: integer(\"impressions\").default(0),\n  profileVisits: integer(\"profile_visits\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  twitterAccounts: many(twitterAccounts),\n  tweets: many(tweets),\n  userTopics: many(userTopics),\n}));\n\nexport const twitterAccountsRelations = relations(twitterAccounts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [twitterAccounts.userId],\n    references: [users.id],\n  }),\n  tweets: many(tweets),\n  analytics: many(analytics),\n}));\n\nexport const socialAccountsRelations = relations(socialAccounts, ({ one }) => ({\n  user: one(users, {\n    fields: [socialAccounts.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const contentTopicsRelations = relations(contentTopics, ({ many }) => ({\n  userTopics: many(userTopics),\n}));\n\nexport const userTopicsRelations = relations(userTopics, ({ one }) => ({\n  user: one(users, {\n    fields: [userTopics.userId],\n    references: [users.id],\n  }),\n  topic: one(contentTopics, {\n    fields: [userTopics.topicId],\n    references: [contentTopics.id],\n  }),\n}));\n\nexport const tweetsRelations = relations(tweets, ({ one }) => ({\n  user: one(users, {\n    fields: [tweets.userId],\n    references: [users.id],\n  }),\n  twitterAccount: one(twitterAccounts, {\n    fields: [tweets.twitterAccountId],\n    references: [twitterAccounts.id],\n  }),\n}));\n\nexport const analyticsRelations = relations(analytics, ({ one }) => ({\n  twitterAccount: one(twitterAccounts, {\n    fields: [analytics.twitterAccountId],\n    references: [twitterAccounts.id],\n  }),\n}));\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertTwitterAccount = typeof twitterAccounts.$inferInsert;\nexport type TwitterAccount = typeof twitterAccounts.$inferSelect;\n\nexport type InsertContentTopic = typeof contentTopics.$inferInsert;\nexport type ContentTopic = typeof contentTopics.$inferSelect;\n\nexport type InsertUserTopic = typeof userTopics.$inferInsert;\nexport type UserTopic = typeof userTopics.$inferSelect;\n\nexport type InsertTweet = typeof tweets.$inferInsert;\nexport type Tweet = typeof tweets.$inferSelect;\n\nexport type InsertAnalytics = typeof analytics.$inferInsert;\nexport type Analytics = typeof analytics.$inferSelect;\n\nexport type SocialAccount = typeof socialAccounts.$inferSelect;\nexport type InsertSocialAccount = typeof socialAccounts.$inferInsert;\n\n// Insert schemas for validation\nexport const insertTwitterAccountSchema = createInsertSchema(twitterAccounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTweetSchema = createInsertSchema(tweets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserTopicSchema = createInsertSchema(userTopics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContentTopicSchema = createInsertSchema(contentTopics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n  createdAt: true,\n});\n\n","size_bytes":7992},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ContentGenerator from \"@/pages/content-generator\";\nimport Schedule from \"@/pages/schedule\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/content-generator\" component={ContentGenerator} />\n          <Route path=\"/schedule\" component={Schedule} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1419},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(217, 91%, 60%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(45, 93%, 47%);\n  --chart-4: hsl(142, 69%, 58%);\n  --chart-5: hsl(336, 84%, 17%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px -1px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px -1px hsl(0, 0%, 0%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -2px hsl(0, 0%, 0%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -4px hsl(0, 0%, 0%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 8px 10px -6px hsl(0, 0%, 0%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 47%, 11%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px -1px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px -1px hsl(0, 0%, 0%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -2px hsl(0, 0%, 0%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -4px hsl(0, 0%, 0%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 8px 10px -6px hsl(0, 0%, 0%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n@layer components {\n  .slate-bg {\n    background-color: hsl(210, 20%, 98%);\n  }\n  \n  .slate-card {\n    background-color: hsl(0, 0%, 100%);\n    border: 1px solid hsl(214, 32%, 91%);\n  }\n  \n  .blue-primary {\n    background-color: hsl(217, 91%, 60%);\n    color: hsl(0, 0%, 100%);\n  }\n  \n  .blue-primary:hover {\n    background-color: hsl(217, 91%, 55%);\n  }\n  \n  .slate-text {\n    color: hsl(210, 25%, 7.8431%);\n  }\n  \n  .slate-text-muted {\n    color: hsl(215, 16%, 47%);\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(210, 40%, 96%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(215, 16%, 47%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(215, 20%, 35%);\n}\n\n/* Animation improvements */\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-slide-in {\n  animation: slideIn 0.2s ease-out;\n}\n\n/* Focus states */\n.focus-ring {\n  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;\n}\n\n/* Button hover animations */\n.hover-lift:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsl(0, 0%, 0%, 0.15);\n}\n\n/* Status indicators */\n.status-connected {\n  @apply bg-emerald-400;\n}\n\n.status-pending {\n  @apply bg-amber-400;\n}\n\n.status-error {\n  @apply bg-red-400;\n}\n","size_bytes":5889},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/facebook.ts":{"content":"\ninterface FacebookTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\ninterface FacebookUserProfile {\n  id: string;\n  name: string;\n  email: string;\n  picture: {\n    data: {\n      url: string;\n    };\n  };\n}\n\nexport class FacebookService {\n  private apiBaseUrl = 'https://graph.facebook.com/v18.0';\n  private oauthBaseUrl = 'https://www.facebook.com/v18.0/dialog/oauth';\n\n  generateAuthUrl(userId: string): string {\n    const clientId = process.env.FACEBOOK_APP_ID;\n    if (!clientId) {\n      throw new Error('Facebook App ID not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/facebook/callback`;\n    const state = userId;\n    const scope = 'email,public_profile';\n    \n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      state,\n      scope,\n      response_type: 'code',\n    });\n\n    console.log('Generated Facebook auth URL with redirect:', redirectUri);\n    return `${this.oauthBaseUrl}?${params.toString()}`;\n  }\n\n  async exchangeCodeForTokens(code: string, userId: string): Promise<FacebookTokenResponse> {\n    const clientId = process.env.FACEBOOK_APP_ID;\n    const clientSecret = process.env.FACEBOOK_APP_SECRET;\n    \n    if (!clientId || !clientSecret) {\n      throw new Error('Facebook OAuth credentials not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/facebook/callback`;\n    \n    try {\n      console.log('Exchanging code for tokens with redirect URI:', redirectUri);\n      \n      const params = new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        redirect_uri: redirectUri,\n        code,\n      });\n\n      const response = await fetch(`${this.apiBaseUrl}/oauth/access_token?${params.toString()}`);\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        console.error('Facebook token exchange error:', data);\n        throw new Error(`Facebook token exchange failed: ${JSON.stringify(data)}`);\n      }\n\n      console.log('Successfully exchanged code for tokens');\n      return data;\n    } catch (error) {\n      console.error('Token exchange error:', error);\n      throw new Error(`Failed to exchange code for tokens: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getUserProfile(accessToken: string): Promise<FacebookUserProfile> {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/me?fields=id,name,email,picture&access_token=${accessToken}`);\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Facebook API error: ${JSON.stringify(data)}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch user profile:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to fetch user profile: ${errorMessage}`);\n    }\n  }\n}\n\nexport const facebookService = new FacebookService();\n","size_bytes":3712},"server/services/google.ts":{"content":"\ninterface GoogleTokenResponse {\n  access_token: string;\n  refresh_token?: string;\n  expires_in: number;\n  token_type: string;\n}\n\ninterface GoogleUserProfile {\n  id: string;\n  email: string;\n  name: string;\n  picture: string;\n}\n\nexport class GoogleService {\n  private apiBaseUrl = 'https://www.googleapis.com/oauth2/v2';\n  private oauthBaseUrl = 'https://oauth2.googleapis.com';\n\n  generateAuthUrl(userId: string): string {\n    const clientId = process.env.GOOGLE_CLIENT_ID;\n    if (!clientId) {\n      throw new Error('Google Client ID not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/google/callback`;\n    const state = userId;\n    const scope = 'openid email profile';\n    \n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      scope,\n      state,\n      access_type: 'offline',\n      prompt: 'consent',\n    });\n\n    console.log('Generated Google auth URL with redirect:', redirectUri);\n    return `${this.oauthBaseUrl}/auth?${params.toString()}`;\n  }\n\n  async exchangeCodeForTokens(code: string, userId: string): Promise<GoogleTokenResponse> {\n    const clientId = process.env.GOOGLE_CLIENT_ID;\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n    \n    if (!clientId || !clientSecret) {\n      throw new Error('Google OAuth credentials not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/google/callback`;\n    \n    try {\n      console.log('Exchanging code for tokens with redirect URI:', redirectUri);\n      \n      const response = await fetch(`${this.oauthBaseUrl}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          code,\n          client_id: clientId,\n          client_secret: clientSecret,\n          redirect_uri: redirectUri,\n          grant_type: 'authorization_code',\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        console.error('Google token exchange error:', data);\n        throw new Error(`Google token exchange failed: ${JSON.stringify(data)}`);\n      }\n\n      console.log('Successfully exchanged code for tokens');\n      return data;\n    } catch (error) {\n      console.error('Token exchange error:', error);\n      throw new Error(`Failed to exchange code for tokens: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getUserProfile(accessToken: string): Promise<GoogleUserProfile> {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/userinfo`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Google API error: ${JSON.stringify(data)}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch user profile:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to fetch user profile: ${errorMessage}`);\n    }\n  }\n\n  async refreshAccessToken(refreshToken: string): Promise<GoogleTokenResponse> {\n    try {\n      const clientId = process.env.GOOGLE_CLIENT_ID;\n      const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n      \n      if (!clientId || !clientSecret) {\n        throw new Error('Google OAuth credentials not configured');\n      }\n\n      const response = await fetch(`${this.oauthBaseUrl}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n          client_id: clientId,\n          client_secret: clientSecret,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Google OAuth error: ${JSON.stringify(data)}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to refresh access token:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to refresh access token: ${errorMessage}`);\n    }\n  }\n}\n\nexport const googleService = new GoogleService();\n","size_bytes":5055},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR \n});\n\ninterface ContentGenerationOptions {\n  topics: string[];\n  style?: 'professional' | 'casual' | 'engaging' | 'educational';\n  length?: 'short' | 'medium' | 'long';\n  includeHashtags?: boolean;\n  includeEmojis?: boolean;\n}\n\ninterface GeneratedContent {\n  content: string;\n  hashtags: string[];\n  engagement_score: number;\n  character_count: number;\n}\n\nexport async function generateTweetContent(options: ContentGenerationOptions): Promise<GeneratedContent> {\n  const { topics, style = 'engaging', length = 'medium', includeHashtags = true, includeEmojis = true } = options;\n  \n  const topicString = topics.join(', ');\n  const styleInstructions = getStyleInstructions(style);\n  const lengthInstructions = getLengthInstructions(length);\n  \n  const prompt = `Generate a ${style} tweet about ${topicString}. \n${styleInstructions}\n${lengthInstructions}\n${includeHashtags ? 'Include relevant trending hashtags.' : 'Do not include hashtags.'}\n${includeEmojis ? 'Include appropriate emojis to increase engagement.' : 'Do not include emojis.'}\n\nRespond with JSON in this format:\n{\n  \"content\": \"The tweet content\",\n  \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n  \"engagement_score\": 8.5,\n  \"character_count\": 247\n}\n\nThe engagement_score should be between 1-10 based on how likely the tweet is to get high engagement.\nEnsure the character count is accurate and under 280 characters.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert social media content creator specializing in Twitter. You understand viral content patterns, trending topics, and engagement optimization.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.8,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      content: result.content || '',\n      hashtags: result.hashtags || [],\n      engagement_score: Math.max(1, Math.min(10, result.engagement_score || 5)),\n      character_count: result.character_count || result.content?.length || 0,\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    throw new Error(`Failed to generate tweet content: ${errorMessage}`);\n  }\n}\n\nexport async function generateMultipleTweets(\n  options: ContentGenerationOptions,\n  count: number = 3\n): Promise<GeneratedContent[]> {\n  const promises = Array(count).fill(null).map(() => generateTweetContent(options));\n  return await Promise.all(promises);\n}\n\nexport async function optimizeTweetContent(content: string, targetAudience?: string): Promise<GeneratedContent> {\n  const prompt = `Optimize this tweet for better engagement${targetAudience ? ` targeting ${targetAudience}` : ''}:\n\n\"${content}\"\n\nImprove it by:\n- Making it more engaging and compelling\n- Optimizing hashtag usage\n- Adding appropriate emojis\n- Ensuring optimal length for engagement\n- Maintaining the original message and tone\n\nRespond with JSON in this format:\n{\n  \"content\": \"The optimized tweet content\",\n  \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n  \"engagement_score\": 8.5,\n  \"character_count\": 247\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert social media optimizer specializing in Twitter engagement and viral content creation.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      content: result.content || content,\n      hashtags: result.hashtags || [],\n      engagement_score: Math.max(1, Math.min(10, result.engagement_score || 5)),\n      character_count: result.character_count || result.content?.length || 0,\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    throw new Error(`Failed to optimize tweet content: ${errorMessage}`);\n  }\n}\n\nfunction getStyleInstructions(style: string): string {\n  switch (style) {\n    case 'professional':\n      return 'Write in a professional, authoritative tone suitable for business audiences. Focus on insights and expertise.';\n    case 'casual':\n      return 'Write in a friendly, conversational tone. Keep it relatable and approachable.';\n    case 'engaging':\n      return 'Write to maximize engagement with compelling hooks, questions, or thought-provoking statements.';\n    case 'educational':\n      return 'Write in an informative, educational tone that teaches or explains concepts clearly.';\n    default:\n      return 'Write in an engaging, authentic voice that resonates with your audience.';\n  }\n}\n\nfunction getLengthInstructions(length: string): string {\n  switch (length) {\n    case 'short':\n      return 'Keep it concise, under 150 characters for maximum impact.';\n    case 'medium':\n      return 'Aim for 150-220 characters to balance detail with conciseness.';\n    case 'long':\n      return 'Use the full character limit (up to 280) to provide comprehensive content.';\n    default:\n      return 'Optimize length for the content type and engagement potential.';\n  }\n}\n","size_bytes":5702},"server/services/scheduler.ts":{"content":"import { storage } from '../storage';\nimport { twitterService } from './twitter';\nimport cron from 'node-cron';\n\nclass SchedulerService {\n  private isRunning = false;\n\n  start() {\n    if (this.isRunning) return;\n    \n    // Check for scheduled tweets every minute\n    cron.schedule('* * * * *', async () => {\n      await this.processScheduledTweets();\n    });\n\n    this.isRunning = true;\n    console.log('Tweet scheduler started');\n  }\n\n  stop() {\n    this.isRunning = false;\n    console.log('Tweet scheduler stopped');\n  }\n\n  async processScheduledTweets() {\n    try {\n      const scheduledTweets = await storage.getScheduledTweets();\n      \n      for (const tweet of scheduledTweets) {\n        try {\n          const twitterAccount = await storage.getTwitterAccountById(tweet.twitterAccountId);\n          if (!twitterAccount) {\n            console.error(`Twitter account not found for tweet ${tweet.id}`);\n            continue;\n          }\n\n          let accessToken = twitterAccount.accessToken;\n\n          // Check if token needs refresh\n          if (twitterAccount.tokenExpiresAt && new Date() >= twitterAccount.tokenExpiresAt) {\n            if (twitterAccount.refreshToken) {\n              try {\n                const tokens = await twitterService.refreshAccessToken(twitterAccount.refreshToken);\n                accessToken = tokens.access_token;\n                \n                // Update stored tokens\n                await storage.updateTwitterAccount(twitterAccount.id, {\n                  accessToken,\n                  refreshToken: tokens.refresh_token || twitterAccount.refreshToken,\n                  tokenExpiresAt: new Date(Date.now() + 7200 * 1000), // 2 hours\n                });\n              } catch (error) {\n                console.error(`Failed to refresh token for account ${twitterAccount.id}:`, error);\n                await storage.updateTweet(tweet.id, { \n                  status: 'failed',\n                  updatedAt: new Date()\n                });\n                continue;\n              }\n            } else {\n              console.error(`No refresh token available for account ${twitterAccount.id}`);\n              await storage.updateTweet(tweet.id, { \n                status: 'failed',\n                updatedAt: new Date()\n              });\n              continue;\n            }\n          }\n\n          // Post the tweet\n          const twitterTweetId = await twitterService.postTweet(accessToken, tweet.content);\n          \n          if (twitterTweetId) {\n            await storage.updateTweet(tweet.id, {\n              status: 'posted',\n              postedAt: new Date(),\n              twitterTweetId,\n              updatedAt: new Date()\n            });\n            \n            console.log(`Successfully posted tweet ${tweet.id} as ${twitterTweetId}`);\n          } else {\n            throw new Error('Failed to get tweet ID from Twitter API');\n          }\n        } catch (error) {\n          console.error(`Failed to post scheduled tweet ${tweet.id}:`, error);\n          await storage.updateTweet(tweet.id, { \n            status: 'failed',\n            updatedAt: new Date()\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error processing scheduled tweets:', error);\n    }\n  }\n\n  async scheduleImmediatePost(tweetId: string): Promise<void> {\n    const tweet = await storage.getTweetById(tweetId);\n    if (!tweet) {\n      throw new Error('Tweet not found');\n    }\n\n    // Update tweet to be scheduled for immediate posting\n    await storage.updateTweet(tweetId, {\n      scheduledFor: new Date(),\n      status: 'scheduled',\n      approvalStatus: 'approved',\n      updatedAt: new Date()\n    });\n  }\n}\n\nexport const schedulerService = new SchedulerService();\n\n// Auto-start the scheduler when the service is imported\nschedulerService.start();\n","size_bytes":3808},"server/services/twitter.ts":{"content":"interface TwitterAPIResponse {\n  data?: any;\n  errors?: any[];\n}\n\nexport class TwitterService {\n  private apiBaseUrl = 'https://api.twitter.com/2';\n  private oauthBaseUrl = 'https://api.twitter.com/2/oauth2';\n\n  generateAuthUrl(userId: string): string {\n    const clientId = process.env.TWITTER_CLIENT_ID;\n    if (!clientId) {\n      throw new Error('Twitter Client ID not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/twitter/callback`;\n    const state = userId; // Use userId as state for security\n    const scope = 'tweet.read tweet.write users.read offline.access';\n    \n    // Generate a proper code challenge for PKCE\n    const codeChallenge = Buffer.from('tweetbot-challenge-' + userId).toString('base64url');\n    \n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      scope,\n      state,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'plain',\n    });\n\n    console.log('Generated auth URL with redirect:', redirectUri);\n    return `https://twitter.com/i/oauth2/authorize?${params.toString()}`;\n  }\n\n  async exchangeCodeForTokens(code: string, userId: string): Promise<{access_token: string, refresh_token?: string}> {\n    const clientId = process.env.TWITTER_CLIENT_ID;\n    const clientSecret = process.env.TWITTER_CLIENT_SECRET;\n    \n    if (!clientId || !clientSecret) {\n      throw new Error('Twitter OAuth credentials not configured');\n    }\n\n    // Get the correct domain from Replit environment\n    let baseUrl;\n    if (process.env.REPLIT_DOMAINS) {\n      const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n      baseUrl = `https://${domain}`;\n    } else if (process.env.REPL_SLUG) {\n      baseUrl = `https://${process.env.REPL_SLUG}.replit.dev`;\n    } else {\n      baseUrl = 'http://0.0.0.0:5000';\n    }\n    const redirectUri = `${baseUrl}/api/twitter/callback`;\n    \n    // Generate the same code verifier as used in the auth URL\n    const codeVerifier = 'tweetbot-challenge-' + userId;\n    \n    try {\n      console.log('Exchanging code for tokens with redirect URI:', redirectUri);\n      \n      const response = await fetch(`${this.oauthBaseUrl}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,\n        },\n        body: new URLSearchParams({\n          code,\n          grant_type: 'authorization_code',\n          client_id: clientId,\n          redirect_uri: redirectUri,\n          code_verifier: codeVerifier,\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        console.error('Twitter token exchange error:', data);\n        throw new Error(`Twitter token exchange failed: ${JSON.stringify(data)}`);\n      }\n\n      console.log('Successfully exchanged code for tokens');\n      return {\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n      };\n    } catch (error) {\n      console.error('Token exchange error:', error);\n      throw new Error(`Failed to exchange code for tokens: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async postTweet(accessToken: string, content: string): Promise<string | null> {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/tweets`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: content\n        }),\n      });\n\n      const data: TwitterAPIResponse = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Twitter API error: ${JSON.stringify(data.errors)}`);\n      }\n\n      return data.data?.id || null;\n    } catch (error) {\n      console.error('Failed to post tweet:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to post tweet: ${errorMessage}`);\n    }\n  }\n\n  async getUserProfile(accessToken: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/users/me?user.fields=public_metrics,profile_image_url`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      const data: TwitterAPIResponse = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Twitter API error: ${JSON.stringify(data.errors)}`);\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Failed to fetch user profile:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to fetch user profile: ${errorMessage}`);\n    }\n  }\n\n  async getTweetMetrics(accessToken: string, tweetId: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/tweets/${tweetId}?tweet.fields=public_metrics`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      const data: TwitterAPIResponse = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Twitter API error: ${JSON.stringify(data.errors)}`);\n      }\n\n      return data.data?.public_metrics || {};\n    } catch (error) {\n      console.error('Failed to fetch tweet metrics:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to fetch tweet metrics: ${errorMessage}`);\n    }\n  }\n\n  async refreshAccessToken(refreshToken: string): Promise<{ access_token: string; refresh_token?: string }> {\n    try {\n      const clientId = process.env.TWITTER_CLIENT_ID;\n      const clientSecret = process.env.TWITTER_CLIENT_SECRET;\n      \n      if (!clientId || !clientSecret) {\n        throw new Error('Twitter OAuth credentials not configured');\n      }\n\n      const response = await fetch('https://api.twitter.com/2/oauth2/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Twitter OAuth error: ${JSON.stringify(data)}`);\n      }\n\n      return {\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n      };\n    } catch (error) {\n      console.error('Failed to refresh access token:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to refresh access token: ${errorMessage}`);\n    }\n  }\n\n  \n}\n\nexport const twitterService = new TwitterService();\n","size_bytes":7304},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function Analytics() {\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\" data-testid=\"page-analytics\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n        \n        <div className=\"p-6 space-y-6\">\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                  Analytics Overview\n                </CardTitle>\n                <Select defaultValue=\"30days\">\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-date-range\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                    <SelectItem value=\"90days\">Last 90 days</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-chart-bar text-slate-400 text-4xl mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-slate-800 mb-2\">Analytics Coming Soon</h3>\n                <p className=\"text-slate-600\">Detailed analytics and insights will be available here.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1904},"client/src/pages/content-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport ScheduleModal from \"@/components/modals/schedule-modal\";\n\nexport default function ContentGenerator() {\n  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);\n  const [style, setStyle] = useState<string>('engaging');\n  const [length, setLength] = useState<string>('medium');\n  const [includeHashtags, setIncludeHashtags] = useState(true);\n  const [includeEmojis, setIncludeEmojis] = useState(true);\n  const [generatedContent, setGeneratedContent] = useState<any[]>([]);\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [selectedContentIndex, setSelectedContentIndex] = useState(0);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contentTopics = [] } = useQuery<any[]>({\n    queryKey: [\"/api/content-topics\"],\n  });\n\n  const { data: userTopics = [] } = useQuery<any[]>({\n    queryKey: [\"/api/user-topics\"],\n  });\n\n  const { data: twitterAccounts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/twitter/accounts\"],\n  });\n\n  const generateContentMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await apiRequest(\"POST\", \"/api/generate-content\", params);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedContent(data.content);\n      toast({\n        title: \"Content Generated\",\n        description: \"New tweet content has been generated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveTweetMutation = useMutation({\n    mutationFn: async (tweetData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tweets\", tweetData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tweets\"] });\n      toast({\n        title: \"Tweet Saved\",\n        description: \"Tweet has been saved as draft successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save tweet. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTopicToggle = (topicId: string) => {\n    setSelectedTopics(prev => \n      prev.includes(topicId) \n        ? prev.filter(id => id !== topicId)\n        : [...prev, topicId]\n    );\n  };\n\n  const handleGenerate = () => {\n    if (selectedTopics.length === 0) {\n      toast({\n        title: \"No Topics Selected\",\n        description: \"Please select at least one topic to generate content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateContentMutation.mutate({\n      topicIds: selectedTopics,\n      style,\n      length,\n      includeHashtags,\n      includeEmojis,\n      count: 3,\n    });\n  };\n\n  const handleScheduleClick = (index: number) => {\n    setSelectedContentIndex(index);\n    setShowScheduleModal(true);\n  };\n\n  const handleSaveDraft = (content: any) => {\n    if (twitterAccounts.length === 0) {\n      toast({\n        title: \"No Twitter Account\",\n        description: \"Please connect a Twitter account first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveTweetMutation.mutate({\n      content: content.content,\n      twitterAccountId: twitterAccounts[0].id,\n      status: 'draft',\n      approvalStatus: 'pending',\n      topics: selectedTopics,\n    });\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\" data-testid=\"page-content-generator\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n        \n        <div className=\"p-6\">\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                  AI Content Generator\n                </CardTitle>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = '/settings'}\n                  data-testid=\"button-configure\"\n                >\n                  <i className=\"fas fa-cog mr-1\"></i>\n                  Configure\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-6 space-y-6\">\n              {/* Topic Selection */}\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-3\">\n                  Select Topics\n                </Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {contentTopics.map((topic: any) => {\n                    const isSelected = selectedTopics.includes(topic.id);\n                    return (\n                      <button\n                        key={topic.id}\n                        onClick={() => handleTopicToggle(topic.id)}\n                        className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                          isSelected\n                            ? 'bg-blue-100 text-blue-700'\n                            : 'bg-slate-100 text-slate-600 hover:bg-slate-200'\n                        }`}\n                        data-testid={`topic-${topic.name.toLowerCase()}`}\n                      >\n                        <i className={`${topic.icon} mr-1`}></i>\n                        {topic.name}\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Generation Options */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Style\n                  </Label>\n                  <Select value={style} onValueChange={setStyle}>\n                    <SelectTrigger data-testid=\"select-style\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"professional\">Professional</SelectItem>\n                      <SelectItem value=\"casual\">Casual</SelectItem>\n                      <SelectItem value=\"engaging\">Engaging</SelectItem>\n                      <SelectItem value=\"educational\">Educational</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Length\n                  </Label>\n                  <Select value={length} onValueChange={setLength}>\n                    <SelectTrigger data-testid=\"select-length\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"short\">Short (&lt;150 chars)</SelectItem>\n                      <SelectItem value=\"medium\">Medium (150-220 chars)</SelectItem>\n                      <SelectItem value=\"long\">Long (220-280 chars)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"hashtags\"\n                    checked={includeHashtags}\n                    onCheckedChange={(checked) => setIncludeHashtags(!!checked)}\n                    data-testid=\"checkbox-hashtags\"\n                  />\n                  <Label htmlFor=\"hashtags\" className=\"text-sm text-slate-700\">\n                    Include Hashtags\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"emojis\"\n                    checked={includeEmojis}\n                    onCheckedChange={(checked) => setIncludeEmojis(!!checked)}\n                    data-testid=\"checkbox-emojis\"\n                  />\n                  <Label htmlFor=\"emojis\" className=\"text-sm text-slate-700\">\n                    Include Emojis\n                  </Label>\n                </div>\n              </div>\n\n              {/* Generate Button */}\n              <div className=\"flex justify-center\">\n                <Button \n                  onClick={handleGenerate}\n                  disabled={generateContentMutation.isPending}\n                  className=\"min-w-48\"\n                  data-testid=\"button-generate\"\n                >\n                  {generateContentMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Generating...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-robot mr-2\"></i>\n                      Generate Content\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {/* Generated Content */}\n              {generatedContent.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-slate-800\">Generated Content</h4>\n                  {generatedContent.map((content, index) => (\n                    <div \n                      key={index}\n                      className=\"bg-slate-50 rounded-lg p-4 border border-slate-200\"\n                      data-testid={`generated-content-${index}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <p className=\"text-slate-800 flex-1\">{content.content}</p>\n                        <div className=\"ml-4 text-sm text-slate-500\">\n                          <span data-testid={`character-count-${index}`}>\n                            {content.character_count}/280\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm text-slate-500 mb-4\">\n                        <div className=\"flex space-x-4\">\n                          <span>ðŸ“ˆ Score: {content.engagement_score}/10</span>\n                          <span>ðŸŽ¯ {content.hashtags?.length || 0} hashtags</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-3\">\n                        <Button \n                          onClick={() => handleScheduleClick(index)}\n                          className=\"flex-1\"\n                          data-testid={`button-schedule-${index}`}\n                        >\n                          <i className=\"fas fa-calendar-plus mr-2\"></i>\n                          Schedule Tweet\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          onClick={() => handleSaveDraft(content)}\n                          data-testid={`button-save-draft-${index}`}\n                        >\n                          <i className=\"fas fa-save mr-2\"></i>\n                          Save Draft\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <ScheduleModal\n        isOpen={showScheduleModal}\n        onClose={() => setShowScheduleModal(false)}\n        tweetContent={generatedContent[selectedContentIndex]}\n        topicIds={selectedTopics}\n      />\n    </div>\n  );\n}\n","size_bytes":13007},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport MetricsGrid from \"@/components/dashboard/metrics-grid\";\nimport ContentGenerator from \"@/components/dashboard/content-generator\";\nimport UpcomingPosts from \"@/components/dashboard/upcoming-posts\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Tweet } from \"@shared/schema\";\n\ninterface DashboardStats {\n  followerCount: number;\n  engagementRate: number;\n  tweetsThisMonth: number;\n  pendingApprovals: number;\n}\n\nexport default function Dashboard() {\n  const { data: tweets = [] } = useQuery<Tweet[]>({\n    queryKey: [\"/api/tweets\"],\n  });\n\n  const { data: dashboardStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard-stats\"],\n  });\n\n  const upcomingTweets = tweets.filter((tweet: any) => \n    tweet.status === 'scheduled' && tweet.scheduledFor && new Date(tweet.scheduledFor) > new Date()\n  ).slice(0, 3);\n\n  const topPerformingTweets = tweets.filter((tweet: any) => \n    tweet.status === 'posted' && tweet.engagementData\n  ).sort((a: any, b: any) => {\n    const aEngagement = (a.engagementData?.like_count || 0) + (a.engagementData?.retweet_count || 0);\n    const bEngagement = (b.engagementData?.like_count || 0) + (b.engagementData?.retweet_count || 0);\n    return bEngagement - aEngagement;\n  }).slice(0, 3);\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\" data-testid=\"page-dashboard\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n        \n        <div className=\"p-6 space-y-6\">\n          <MetricsGrid stats={dashboardStats} />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              <ContentGenerator />\n            </div>\n            \n            <div className=\"space-y-6\">\n              <QuickActions pendingCount={dashboardStats?.pendingApprovals || 0} />\n              <UpcomingPosts tweets={upcomingTweets} />\n            </div>\n          </div>\n\n          {/* Performance Overview */}\n          <Card data-testid=\"card-performance\">\n            <CardHeader className=\"border-b border-slate-200\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                  Performance Overview\n                </CardTitle>\n                <Select defaultValue=\"7days\">\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                    <SelectItem value=\"3months\">Last 3 months</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Chart Placeholders */}\n                <div>\n                  <h4 className=\"font-medium text-slate-800 mb-4\">Daily Engagement</h4>\n                  <div className=\"h-48 bg-slate-50 rounded-lg flex items-center justify-center border-2 border-dashed border-slate-300\">\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-chart-line text-slate-400 text-2xl mb-2\"></i>\n                      <p className=\"text-slate-600 text-sm\">Engagement chart will appear here</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-slate-800 mb-4\">Follower Growth</h4>\n                  <div className=\"h-48 bg-slate-50 rounded-lg flex items-center justify-center border-2 border-dashed border-slate-300\">\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-users text-slate-400 text-2xl mb-2\"></i>\n                      <p className=\"text-slate-600 text-sm\">Growth chart will appear here</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Top Performing Posts */}\n              {topPerformingTweets.length > 0 && (\n                <div className=\"mt-6\">\n                  <h4 className=\"font-medium text-slate-800 mb-4\">Top Performing Posts</h4>\n                  <div className=\"space-y-3\">\n                    {topPerformingTweets.map((tweet: any) => (\n                      <div \n                        key={tweet.id} \n                        className=\"flex items-center justify-between p-4 bg-slate-50 rounded-lg\"\n                        data-testid={`tweet-performance-${tweet.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-slate-800 line-clamp-2\">\n                            {tweet.content}\n                          </p>\n                          <p className=\"text-xs text-slate-600 mt-1\">\n                            Posted {tweet.postedAt ? new Date(tweet.postedAt).toLocaleDateString() : 'Recently'}\n                          </p>\n                        </div>\n                        <div className=\"text-right ml-4\">\n                          <div className=\"flex space-x-4 text-sm text-slate-600\">\n                            <span data-testid={`likes-${tweet.id}`}>\n                              <i className=\"fas fa-heart text-red-500 mr-1\"></i>\n                              {tweet.engagementData?.like_count || 0}\n                            </span>\n                            <span data-testid={`retweets-${tweet.id}`}>\n                              <i className=\"fas fa-retweet text-blue-500 mr-1\"></i>\n                              {tweet.engagementData?.retweet_count || 0}\n                            </span>\n                            <span data-testid={`replies-${tweet.id}`}>\n                              <i className=\"fas fa-comment text-gray-500 mr-1\"></i>\n                              {tweet.engagementData?.reply_count || 0}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6729},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-center space-x-3\">\n            <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <i className=\"fab fa-twitter text-white text-xl\"></i>\n            </div>\n            <h1 className=\"text-4xl font-bold text-slate-800\">TweetBot AI</h1>\n          </div>\n          <p className=\"text-xl text-slate-600\">\n            Automated Twitter Growth Platform\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 my-12\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-robot text-blue-600 text-xl\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800 mb-2\">AI Content Generation</h3>\n              <p className=\"text-sm text-slate-600\">\n                Generate engaging tweets using advanced AI that understands your audience and trending topics.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-calendar-alt text-emerald-600 text-xl\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800 mb-2\">Smart Scheduling</h3>\n              <p className=\"text-sm text-slate-600\">\n                Schedule tweets for optimal engagement times with our intelligent posting system.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-chart-bar text-purple-600 text-xl\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800 mb-2\">Growth Analytics</h3>\n              <p className=\"text-sm text-slate-600\">\n                Track your growth with detailed analytics and insights to optimize your Twitter strategy.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"pt-6\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-4\">Get Started</h2>\n            <p className=\"text-slate-600 mb-6\">\n              Sign in to connect your Twitter account and start growing your audience with AI-powered content.\n            </p>\n            <Button \n              className=\"w-full\" \n              size=\"lg\"\n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-login\"\n            >\n              <i className=\"fas fa-sign-in-alt mr-2\"></i>\n              Sign In to Continue\n            </Button>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center text-sm text-slate-500\">\n          <p>Secure â€¢ Automated â€¢ Growth-Focused</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3507},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Schedule() {\n  const [selectedTab, setSelectedTab] = useState(\"scheduled\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tweets = [] } = useQuery<any[]>({\n    queryKey: [\"/api/tweets\"],\n  });\n\n  const updateTweetMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/tweets/${id}`, updates);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tweets\"] });\n      toast({\n        title: \"Tweet Updated\",\n        description: \"Tweet status has been updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update tweet. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const postNowMutation = useMutation({\n    mutationFn: async (tweetId: string) => {\n      const response = await apiRequest(\"POST\", `/api/tweets/${tweetId}/post-now`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tweets\"] });\n      toast({\n        title: \"Tweet Posted\",\n        description: \"Tweet has been posted immediately!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Post Failed\",\n        description: \"Failed to post tweet. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (tweetId: string) => {\n    updateTweetMutation.mutate({\n      id: tweetId,\n      updates: { approvalStatus: 'approved' }\n    });\n  };\n\n  const handleReject = (tweetId: string) => {\n    updateTweetMutation.mutate({\n      id: tweetId,\n      updates: { approvalStatus: 'rejected' }\n    });\n  };\n\n  const handlePostNow = (tweetId: string) => {\n    postNowMutation.mutate(tweetId);\n  };\n\n  const getStatusBadge = (status: string, approvalStatus: string) => {\n    if (status === 'posted') {\n      return <Badge className=\"bg-emerald-100 text-emerald-800\">Posted</Badge>;\n    }\n    if (status === 'failed') {\n      return <Badge variant=\"destructive\">Failed</Badge>;\n    }\n    if (status === 'scheduled' && approvalStatus === 'approved') {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Scheduled</Badge>;\n    }\n    if (approvalStatus === 'pending') {\n      return <Badge className=\"bg-amber-100 text-amber-800\">Pending Approval</Badge>;\n    }\n    if (approvalStatus === 'rejected') {\n      return <Badge variant=\"secondary\">Rejected</Badge>;\n    }\n    return <Badge variant=\"secondary\">Draft</Badge>;\n  };\n\n  const scheduledTweets = tweets.filter((tweet: any) => \n    tweet.status === 'scheduled' && tweet.approvalStatus === 'approved'\n  );\n\n  const pendingTweets = tweets.filter((tweet: any) => \n    tweet.approvalStatus === 'pending'\n  );\n\n  const draftTweets = tweets.filter((tweet: any) => \n    tweet.status === 'draft' || tweet.approvalStatus === 'rejected'\n  );\n\n  const postedTweets = tweets.filter((tweet: any) => \n    tweet.status === 'posted'\n  );\n\n  const renderTweetCard = (tweet: any) => (\n    <Card key={tweet.id} className=\"mb-4\" data-testid={`tweet-card-${tweet.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex-1\">\n            <p className=\"text-slate-800 mb-2\">{tweet.content}</p>\n            {tweet.scheduledFor && (\n              <p className=\"text-sm text-slate-600\">\n                <i className=\"fas fa-clock mr-1\"></i>\n                Scheduled for {new Date(tweet.scheduledFor).toLocaleString()}\n              </p>\n            )}\n            {tweet.postedAt && (\n              <p className=\"text-sm text-slate-600\">\n                <i className=\"fas fa-check mr-1\"></i>\n                Posted on {new Date(tweet.postedAt).toLocaleString()}\n              </p>\n            )}\n          </div>\n          {getStatusBadge(tweet.status, tweet.approvalStatus)}\n        </div>\n        \n        {tweet.approvalStatus === 'pending' && (\n          <div className=\"flex space-x-2 mt-3\">\n            <Button \n              size=\"sm\" \n              onClick={() => handleApprove(tweet.id)}\n              data-testid={`button-approve-${tweet.id}`}\n            >\n              <i className=\"fas fa-check mr-1\"></i>\n              Approve\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={() => handleReject(tweet.id)}\n              data-testid={`button-reject-${tweet.id}`}\n            >\n              <i className=\"fas fa-times mr-1\"></i>\n              Reject\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => handlePostNow(tweet.id)}\n              data-testid={`button-post-now-${tweet.id}`}\n            >\n              <i className=\"fas fa-paper-plane mr-1\"></i>\n              Post Now\n            </Button>\n          </div>\n        )}\n        \n        {tweet.status === 'posted' && tweet.engagementData && (\n          <div className=\"flex space-x-4 mt-3 text-sm text-slate-600\">\n            <span data-testid={`likes-${tweet.id}`}>\n              <i className=\"fas fa-heart text-red-500 mr-1\"></i>\n              {tweet.engagementData.like_count || 0}\n            </span>\n            <span data-testid={`retweets-${tweet.id}`}>\n              <i className=\"fas fa-retweet text-blue-500 mr-1\"></i>\n              {tweet.engagementData.retweet_count || 0}\n            </span>\n            <span data-testid={`replies-${tweet.id}`}>\n              <i className=\"fas fa-comment text-gray-500 mr-1\"></i>\n              {tweet.engagementData.reply_count || 0}\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\" data-testid=\"page-schedule\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n        \n        <div className=\"p-6\">\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                Content Schedule & Approval\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"p-6\">\n              <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n                    Pending Approval ({pendingTweets.length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"scheduled\" data-testid=\"tab-scheduled\">\n                    Scheduled ({scheduledTweets.length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"drafts\" data-testid=\"tab-drafts\">\n                    Drafts ({draftTweets.length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"posted\" data-testid=\"tab-posted\">\n                    Posted ({postedTweets.length})\n                  </TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"pending\" className=\"mt-6\">\n                  <div data-testid=\"content-pending\">\n                    {pendingTweets.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <i className=\"fas fa-check-circle text-slate-400 text-4xl mb-4\"></i>\n                        <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No Pending Approvals</h3>\n                        <p className=\"text-slate-600\">All tweets have been reviewed.</p>\n                      </div>\n                    ) : (\n                      pendingTweets.map(renderTweetCard)\n                    )}\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"scheduled\" className=\"mt-6\">\n                  <div data-testid=\"content-scheduled\">\n                    {scheduledTweets.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <i className=\"fas fa-calendar-alt text-slate-400 text-4xl mb-4\"></i>\n                        <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No Scheduled Tweets</h3>\n                        <p className=\"text-slate-600\">Schedule some content to see it here.</p>\n                      </div>\n                    ) : (\n                      scheduledTweets.map(renderTweetCard)\n                    )}\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"drafts\" className=\"mt-6\">\n                  <div data-testid=\"content-drafts\">\n                    {draftTweets.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <i className=\"fas fa-file-alt text-slate-400 text-4xl mb-4\"></i>\n                        <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No Drafts</h3>\n                        <p className=\"text-slate-600\">Create some content to see drafts here.</p>\n                      </div>\n                    ) : (\n                      draftTweets.map(renderTweetCard)\n                    )}\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"posted\" className=\"mt-6\">\n                  <div data-testid=\"content-posted\">\n                    {postedTweets.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <i className=\"fas fa-paper-plane text-slate-400 text-4xl mb-4\"></i>\n                        <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No Posted Tweets</h3>\n                        <p className=\"text-slate-600\">Your posted tweets will appear here.</p>\n                      </div>\n                    ) : (\n                      postedTweets.map(renderTweetCard)\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":11442},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Settings() {\n  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Assuming 'user' is available in the scope, perhaps from a context or another hook\n  // For demonstration, let's assume it's fetched or provided elsewhere.\n  // const { data: user } = useQuery({ queryKey: [\"/api/user\"] });\n\n  const { data: contentTopics = [] } = useQuery<any[]>({\n    queryKey: [\"/api/content-topics\"],\n  });\n\n  const { data: userTopics = [] } = useQuery<any[]>({\n    queryKey: [\"/api/user-topics\"],\n  });\n\n  // Update selectedTopics when userTopics data changes\n  useEffect(() => {\n    if (Array.isArray(userTopics) && userTopics.length > 0) {\n      const topicIds = (userTopics as any[]).map((ut: any) => ut.topicId);\n      setSelectedTopics(prev => {\n        // Only update if the arrays are different to prevent infinite loop\n        if (JSON.stringify(prev.sort()) !== JSON.stringify(topicIds.sort())) {\n          return topicIds;\n        }\n        return prev;\n      });\n    } else {\n      setSelectedTopics(prev => prev.length > 0 ? [] : prev);\n    }\n  }, [userTopics])\n\n  const { data: socialAccounts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/social/accounts\"],\n    // enabled: !!user, // Uncomment if 'user' is available and controls fetching\n  });\n\n  const connectGoogleMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/google/auth-url\");\n      if (!response.ok) throw new Error(\"Failed to get Google auth URL\");\n      const data = await response.json();\n      window.location.href = data.authUrl;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social/accounts\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to initiate Google connection. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error connecting Google:\", error);\n    },\n  });\n\n  const connectFacebookMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/facebook/auth-url\");\n      if (!response.ok) throw new Error(\"Failed to get Facebook auth URL\");\n      const data = await response.json();\n      window.location.href = data.authUrl;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social/accounts\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to initiate Facebook connection. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error connecting Facebook:\", error);\n    },\n  });\n\n  const updateTopicsMutation = useMutation({\n    mutationFn: async (topicIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/user-topics\", { topicIds });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-topics\"] });\n      toast({\n        title: \"Topics Updated\",\n        description: \"Your content topics have been updated successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update topics. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const disconnectMutation = useMutation({\n    mutationFn: async (provider: string, accountId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/social/accounts/${provider}/${accountId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social/accounts\"] });\n      toast({\n        title: \"Account Disconnected\",\n        description: \"Social account has been disconnected successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Disconnect Failed\",\n        description: \"Failed to disconnect social account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTopicToggle = (topicId: string) => {\n    setSelectedTopics(prev => \n      prev.includes(topicId) \n        ? prev.filter(id => id !== topicId)\n        : [...prev, topicId]\n    );\n  };\n\n  const handleSaveTopics = () => {\n    updateTopicsMutation.mutate(selectedTopics);\n  };\n\n  const handleConnectGoogle = () => {\n    connectGoogleMutation.mutate();\n  };\n\n  const handleConnectFacebook = () => {\n    connectFacebookMutation.mutate();\n  };\n\n  const handleDisconnect = (provider: string, accountId: string) => {\n    disconnectMutation.mutate(provider, accountId);\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\" data-testid=\"page-settings\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <Header />\n\n        <div className=\"p-6 space-y-6\">\n          {/* Social Account Connections */}\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                Social Account Connections\n              </CardTitle>\n            </CardHeader>\n\n            <CardContent className=\"p-6\">\n              {socialAccounts.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {socialAccounts.map((account: any) => (\n                    <div \n                      key={`${account.provider}-${account.id}`}\n                      className=\"flex items-center space-x-3 p-3 bg-slate-50 rounded-lg\"\n                      data-testid={`connected-account-${account.username}`}\n                    >\n                      <img \n                        src={account.profileImageUrl} \n                        alt={`${account.username} profile`}\n                        className=\"w-10 h-10 rounded-full\" \n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-sm text-slate-800\">@{account.username}</p>\n                        <p className=\"text-xs text-slate-500\">\n                          {account.followerCount?.toLocaleString() || 0} followers\n                        </p>\n                      </div>\n                      <Badge className=\"bg-emerald-100 text-emerald-800\">\n                        <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-2\"></div>\n                        Connected\n                      </Badge>\n                      <Button \n                        variant=\"destructive\" \n                        size=\"sm\"\n                        onClick={() => handleDisconnect(account.provider, account.id)}\n                        data-testid={`button-disconnect-${account.provider}`}\n                      >\n                        Disconnect\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n                  <div className=\"flex space-x-4\">\n                    <Button \n                      onClick={handleConnectGoogle}\n                      disabled={connectGoogleMutation.isPending}\n                      data-testid=\"button-connect-google\"\n                      variant=\"outline\"\n                      className=\"border-gray-300\"\n                    >\n                      {connectGoogleMutation.isPending ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Connecting...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fab fa-google mr-2 text-red-500\"></i>\n                          Connect Google\n                        </>\n                      )}\n                    </Button>\n                    <Button \n                      onClick={handleConnectFacebook}\n                      disabled={connectFacebookMutation.isPending}\n                      data-testid=\"button-connect-facebook\"\n                      variant=\"outline\"\n                      className=\"border-gray-300\"\n                    >\n                      {connectFacebookMutation.isPending ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Connecting...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fab fa-facebook mr-2 text-blue-600\"></i>\n                          Connect Facebook\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Content Topics */}\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                Content Topics\n              </CardTitle>\n            </CardHeader>\n\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <Label className=\"text-sm font-medium text-slate-700\">\n                  Select topics for AI content generation\n                </Label>\n\n                <div className=\"flex flex-wrap gap-2\">\n                  {contentTopics.map((topic: any) => {\n                    const isSelected = selectedTopics.includes(topic.id);\n                    return (\n                      <button\n                        key={topic.id}\n                        onClick={() => handleTopicToggle(topic.id)}\n                        className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                          isSelected\n                            ? 'bg-blue-100 text-blue-700 border-2 border-blue-200'\n                            : 'bg-slate-100 text-slate-600 hover:bg-slate-200 border-2 border-transparent'\n                        }`}\n                        data-testid={`topic-setting-${topic.name.toLowerCase()}`}\n                      >\n                        <i className={`${topic.icon} mr-1`}></i>\n                        {topic.name}\n                      </button>\n                    );\n                  })}\n                </div>\n\n                <div className=\"flex justify-end pt-4\">\n                  <Button \n                    onClick={handleSaveTopics}\n                    disabled={updateTopicsMutation.isPending}\n                    data-testid=\"button-save-topics\"\n                  >\n                    {updateTopicsMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-save mr-2\"></i>\n                        Save Topics\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Management */}\n          <Card>\n            <CardHeader className=\"border-b border-slate-200\">\n              <CardTitle className=\"text-lg font-semibold text-slate-800\">\n                Account Management\n              </CardTitle>\n            </CardHeader>\n\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.location.href = '/api/logout'}\n                  data-testid=\"button-logout\"\n                >\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Sign Out\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13801},"client/src/components/dashboard/content-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport ScheduleModal from \"@/components/modals/schedule-modal\";\n\nexport default function ContentGenerator() {\n  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);\n  const [generatedContent, setGeneratedContent] = useState<any>(null);\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: userTopics = [] } = useQuery<any[]>({\n    queryKey: [\"/api/user-topics\"],\n  });\n\n  const { data: twitterAccounts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/twitter/accounts\"],\n  });\n\n  const generateContentMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await apiRequest(\"POST\", \"/api/generate-content\", params);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedContent(data.content[0]);\n      toast({\n        title: \"Content Generated\",\n        description: \"New tweet content has been generated!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveTweetMutation = useMutation({\n    mutationFn: async (tweetData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tweets\", tweetData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tweets\"] });\n      toast({\n        title: \"Tweet Saved\",\n        description: \"Tweet has been saved as draft!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\", \n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save tweet. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTopicToggle = (topicId: string) => {\n    setSelectedTopics(prev => \n      prev.includes(topicId) \n        ? prev.filter(id => id !== topicId)\n        : [...prev, topicId]\n    );\n  };\n\n  const handleGenerate = () => {\n    const topicIds = selectedTopics.length > 0 \n      ? selectedTopics \n      : userTopics.slice(0, 2).map((ut: any) => ut.topicId);\n    \n    if (topicIds.length === 0) {\n      toast({\n        title: \"No Topics Available\",\n        description: \"Please set up your content topics in settings first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateContentMutation.mutate({\n      topicIds,\n      style: 'engaging',\n      length: 'medium',\n      includeHashtags: true,\n      includeEmojis: true,\n      count: 1,\n    });\n  };\n\n  const handleSaveDraft = () => {\n    if (!generatedContent) return;\n    \n    if (twitterAccounts.length === 0) {\n      toast({\n        title: \"No Twitter Account\",\n        description: \"Please connect a Twitter account first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveTweetMutation.mutate({\n      content: generatedContent.content,\n      twitterAccountId: twitterAccounts[0].id,\n      status: 'draft',\n      approvalStatus: 'pending',\n      topics: selectedTopics,\n    });\n  };\n\n  return (\n    <Card data-testid=\"content-generator\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-800\">\n            AI Content Generator\n          </CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => window.location.href = '/settings'}\n            data-testid=\"button-configure\"\n          >\n            <i className=\"fas fa-cog mr-1\"></i>\n            Configure\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 space-y-6\">\n        {/* Topic Selection */}\n        <div>\n          <Label className=\"block text-sm font-medium text-slate-700 mb-3\">\n            Select Topics\n          </Label>\n          <div className=\"flex flex-wrap gap-2\">\n            {userTopics.slice(0, 5).map((userTopic: any) => {\n              const isSelected = selectedTopics.includes(userTopic.topicId);\n              return (\n                <button\n                  key={userTopic.topicId}\n                  onClick={() => handleTopicToggle(userTopic.topicId)}\n                  className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    isSelected\n                      ? 'bg-blue-100 text-blue-700'\n                      : 'bg-slate-100 text-slate-600 hover:bg-slate-200'\n                  }`}\n                  data-testid={`topic-${userTopic.topic.name.toLowerCase()}`}\n                >\n                  <i className={`${userTopic.topic.icon} mr-1`}></i>\n                  {userTopic.topic.name}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Content Preview */}\n        {generatedContent ? (\n          <div className=\"bg-slate-50 rounded-lg p-4\" data-testid=\"generated-content\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <h4 className=\"font-medium text-slate-800\">Generated Content</h4>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleGenerate}\n                disabled={generateContentMutation.isPending}\n                data-testid=\"button-regenerate\"\n              >\n                <i className=\"fas fa-sync-alt mr-1\"></i>\n                Regenerate\n              </Button>\n            </div>\n            \n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <p className=\"text-slate-800\" data-testid=\"text-generated-content\">\n                {generatedContent.content}\n              </p>\n              <div className=\"flex items-center justify-between mt-3 text-sm text-slate-500\">\n                <span data-testid=\"text-character-count\">\n                  Characters: {generatedContent.character_count}/280\n                </span>\n                <div className=\"flex space-x-4\">\n                  <span>ðŸ“ˆ Score: {generatedContent.engagement_score}/10</span>\n                  <span>ðŸŽ¯ {generatedContent.hashtags?.length || 0} hashtags</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex space-x-3 mt-4\">\n              <Button \n                className=\"flex-1\"\n                onClick={() => setShowScheduleModal(true)}\n                data-testid=\"button-schedule\"\n              >\n                <i className=\"fas fa-calendar-plus mr-2\"></i>\n                Schedule Tweet\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleSaveDraft}\n                disabled={saveTweetMutation.isPending}\n                data-testid=\"button-save-draft\"\n              >\n                <i className=\"fas fa-save mr-2\"></i>\n                Save Draft\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-slate-50 rounded-lg p-4\">\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-robot text-slate-400 text-3xl mb-4\"></i>\n              <h4 className=\"font-medium text-slate-800 mb-2\">Generate Your First Tweet</h4>\n              <p className=\"text-slate-600 text-sm mb-6\">\n                Click generate to create AI-powered content based on your selected topics.\n              </p>\n              <Button \n                onClick={handleGenerate}\n                disabled={generateContentMutation.isPending}\n                data-testid=\"button-generate\"\n              >\n                {generateContentMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-magic mr-2\"></i>\n                    Generate Content\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n\n      <ScheduleModal\n        isOpen={showScheduleModal}\n        onClose={() => setShowScheduleModal(false)}\n        tweetContent={generatedContent}\n        topicIds={selectedTopics}\n      />\n    </Card>\n  );\n}\n","size_bytes":9437},"client/src/components/dashboard/metrics-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\ninterface MetricsGridProps {\n  stats?: {\n    followerCount: number;\n    engagementRate: number;\n    tweetsThisMonth: number;\n    pendingApprovals: number;\n  };\n}\n\nexport default function MetricsGrid({ stats }: MetricsGridProps) {\n  const metrics = [\n    {\n      title: \"Total Followers\",\n      value: stats?.followerCount?.toLocaleString() || \"0\",\n      icon: \"fas fa-users\",\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      change: \"+12.5%\",\n      changeText: \"vs last month\",\n      testId: \"metric-followers\"\n    },\n    {\n      title: \"Engagement Rate\",\n      value: `${stats?.engagementRate?.toFixed(1) || \"0.0\"}%`,\n      icon: \"fas fa-heart\",\n      iconBg: \"bg-emerald-100\",\n      iconColor: \"text-emerald-600\",\n      change: \"+0.3%\",\n      changeText: \"vs last month\",\n      testId: \"metric-engagement\"\n    },\n    {\n      title: \"Tweets This Month\",\n      value: stats?.tweetsThisMonth?.toString() || \"0\",\n      icon: \"fab fa-twitter\",\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      change: \"Target: 100 tweets\",\n      changeText: \"\",\n      testId: \"metric-tweets\"\n    },\n    {\n      title: \"Pending Approval\",\n      value: stats?.pendingApprovals?.toString() || \"0\",\n      icon: \"fas fa-clock\",\n      iconBg: \"bg-amber-100\",\n      iconColor: \"text-amber-600\",\n      change: (stats?.pendingApprovals || 0) > 0 ? \"Review needed\" : \"All clear\",\n      changeText: \"\",\n      changeColor: (stats?.pendingApprovals || 0) > 0 ? \"text-amber-600\" : \"text-emerald-600\",\n      testId: \"metric-pending\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"metrics-grid\">\n      {metrics.map((metric) => (\n        <Card key={metric.title} className=\"shadow-sm border border-slate-200\" data-testid={metric.testId}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">{metric.title}</p>\n                <p className=\"text-2xl font-bold text-slate-800 mt-2\" data-testid={`${metric.testId}-value`}>\n                  {metric.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${metric.iconBg} rounded-lg flex items-center justify-center`}>\n                <i className={`${metric.icon} ${metric.iconColor} text-lg`}></i>\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <span className={`font-medium ${metric.changeColor || 'text-emerald-600'}`}>\n                {metric.change}\n              </span>\n              {metric.changeText && (\n                <span className=\"text-slate-600 ml-2\">{metric.changeText}</span>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2917},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\n\ninterface QuickActionsProps {\n  pendingCount?: number;\n}\n\nexport default function QuickActions({ pendingCount = 0 }: QuickActionsProps) {\n  const [, setLocation] = useLocation();\n\n  const actions = [\n    {\n      icon: \"fas fa-robot\",\n      label: \"Generate Content\",\n      description: \"Create AI-powered tweets\",\n      color: \"text-blue-600\",\n      onClick: () => setLocation('/content-generator'),\n      testId: \"action-generate\"\n    },\n    {\n      icon: \"fas fa-check-circle\", \n      label: \"Review Queue\",\n      description: \"Approve pending tweets\",\n      color: \"text-emerald-600\",\n      onClick: () => setLocation('/schedule'),\n      badge: pendingCount > 0 ? pendingCount : undefined,\n      testId: \"action-review\"\n    },\n    {\n      icon: \"fas fa-chart-bar\",\n      label: \"View Analytics\", \n      description: \"Check performance metrics\",\n      color: \"text-purple-600\",\n      onClick: () => setLocation('/analytics'),\n      testId: \"action-analytics\"\n    }\n  ];\n\n  return (\n    <Card data-testid=\"quick-actions\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <CardTitle className=\"text-lg font-semibold text-slate-800\">\n          Quick Actions\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {actions.map((action) => (\n            <Button\n              key={action.label}\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-between p-3 h-auto text-left hover:bg-slate-50 transition-colors\"\n              onClick={action.onClick}\n              data-testid={action.testId}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <i className={`${action.icon} ${action.color}`}></i>\n                <div>\n                  <span className=\"font-medium text-slate-800 block\">{action.label}</span>\n                  <span className=\"text-xs text-slate-600\">{action.description}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center\">\n                {action.badge && (\n                  <Badge \n                    className=\"bg-amber-100 text-amber-800 mr-2\"\n                    data-testid={`badge-${action.testId}`}\n                  >\n                    {action.badge}\n                  </Badge>\n                )}\n                <i className=\"fas fa-chevron-right text-slate-400 text-sm\"></i>\n              </div>\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2751},"client/src/components/dashboard/upcoming-posts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface UpcomingPostsProps {\n  tweets: any[];\n}\n\nexport default function UpcomingPosts({ tweets = [] }: UpcomingPostsProps) {\n  const [, setLocation] = useLocation();\n\n  const formatScheduledTime = (scheduledFor: string) => {\n    const date = new Date(scheduledFor);\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const tweetDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    \n    if (tweetDate.getTime() === today.getTime()) {\n      return `Today, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;\n    } else if (tweetDate.getTime() === tomorrow.getTime()) {\n      return `Tomorrow, ${date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}`;\n    } else {\n      return date.toLocaleDateString([], { \n        weekday: 'short', \n        hour: 'numeric', \n        minute: '2-digit' \n      });\n    }\n  };\n\n  const getStatusColor = (index: number) => {\n    const colors = ['bg-blue-500', 'bg-emerald-500', 'bg-purple-500', 'bg-amber-500'];\n    return colors[index % colors.length];\n  };\n\n  const truncateContent = (content: string, maxLength: number = 60) => {\n    if (content.length <= maxLength) return content;\n    return content.substring(0, maxLength) + '...';\n  };\n\n  return (\n    <Card data-testid=\"upcoming-posts\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-800\">\n            Upcoming Posts\n          </CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => setLocation('/schedule')}\n            className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n            data-testid=\"button-view-all\"\n          >\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        {tweets.length === 0 ? (\n          <div className=\"text-center py-8\" data-testid=\"empty-state\">\n            <i className=\"fas fa-calendar-alt text-slate-400 text-3xl mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No Upcoming Posts</h3>\n            <p className=\"text-slate-600 text-sm\">\n              Schedule some content to see it here.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {tweets.map((tweet, index) => (\n              <div \n                key={tweet.id}\n                className=\"flex items-start space-x-3 p-3 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors\"\n                data-testid={`upcoming-post-${tweet.id}`}\n              >\n                <div className={`w-2 h-2 ${getStatusColor(index)} rounded-full mt-2 flex-shrink-0`}></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-slate-800 font-medium mb-1\" data-testid={`post-time-${tweet.id}`}>\n                    {tweet.scheduledFor ? formatScheduledTime(tweet.scheduledFor) : 'Not scheduled'}\n                  </p>\n                  <p className=\"text-xs text-slate-600 line-clamp-2\" data-testid={`post-content-${tweet.id}`}>\n                    {truncateContent(tweet.content)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3673},"client/src/components/layout/header.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title?: string;\n  description?: string;\n}\n\nexport default function Header({ \n  title = \"Dashboard\", \n  description = \"Monitor your Twitter growth and manage content\" \n}: HeaderProps) {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-title\">{title}</h2>\n          <p className=\"text-slate-600 mt-1\" data-testid=\"text-description\">{description}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n            <i className=\"fas fa-bell text-lg\"></i>\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n          </Button>\n          \n          {/* User Menu */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"flex items-center space-x-2\"\n            onClick={() => window.location.href = '/settings'}\n            data-testid=\"button-user-menu\"\n          >\n            {(user as any)?.profileImageUrl ? (\n              <img \n                src={(user as any).profileImageUrl} \n                alt=\"User avatar\" \n                className=\"w-8 h-8 rounded-full\" \n                data-testid=\"img-user-avatar\"\n              />\n            ) : (\n              <div className=\"w-8 h-8 rounded-full bg-slate-200 flex items-center justify-center\">\n                <i className=\"fas fa-user text-slate-400\"></i>\n              </div>\n            )}\n            <i className=\"fas fa-chevron-down text-slate-400 text-xs\"></i>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2042},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  \n  const { data: twitterAccounts = [] } = useQuery<any[]>({\n    queryKey: [\"/api/twitter/accounts\"],\n  });\n\n  const { data: dashboardStats } = useQuery<any>({\n    queryKey: [\"/api/dashboard-stats\"],\n  });\n\n  const primaryAccount = twitterAccounts[0];\n\n  const menuItems = [\n    { path: \"/\", icon: \"fas fa-chart-line\", label: \"Dashboard\" },\n    { path: \"/content-generator\", icon: \"fas fa-robot\", label: \"Content Generator\" },\n    { path: \"/schedule\", icon: \"fas fa-calendar-alt\", label: \"Schedule\" },\n    { path: \"/analytics\", icon: \"fas fa-chart-bar\", label: \"Analytics\" },\n    { path: \"/settings\", icon: \"fas fa-cog\", label: \"Settings\" },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-slate-200 flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <i className=\"fab fa-twitter text-white text-sm\"></i>\n          </div>\n          <h1 className=\"text-xl font-bold text-slate-800\" data-testid=\"text-brand\">TweetBot AI</h1>\n        </div>\n      </div>\n\n      {/* User Account Info */}\n      {primaryAccount && (\n        <div className=\"p-4 border-b border-slate-200\" data-testid=\"user-account-card\">\n          <div className=\"flex items-center space-x-3 p-3 bg-slate-50 rounded-lg\">\n            <img \n              src={primaryAccount.profileImageUrl} \n              alt=\"User profile\" \n              className=\"w-10 h-10 rounded-full\" \n              data-testid=\"img-profile\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"font-medium text-sm text-slate-800\" data-testid=\"text-username\">\n                @{primaryAccount.username}\n              </p>\n              <p className=\"text-xs text-slate-500\" data-testid=\"text-follower-count\">\n                {primaryAccount.followerCount?.toLocaleString() || 0} followers\n              </p>\n            </div>\n            <div className=\"w-2 h-2 bg-emerald-400 rounded-full\" title=\"Connected\" data-testid=\"status-connected\"></div>\n          </div>\n        </div>\n      )}\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const isActive = location === item.path;\n            return (\n              <li key={item.path}>\n                <button\n                  onClick={() => setLocation(item.path)}\n                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors ${\n                    isActive\n                      ? 'bg-blue-50 text-blue-700'\n                      : 'text-slate-600 hover:bg-slate-100'\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <i className={`${item.icon} w-5`}></i>\n                  <span>{item.label}</span>\n                  {item.label === \"Schedule\" && dashboardStats?.pendingApprovals > 0 && (\n                    <span \n                      className=\"bg-amber-100 text-amber-800 text-xs font-medium px-2 py-1 rounded-full\"\n                      data-testid=\"badge-pending-count\"\n                    >\n                      {dashboardStats.pendingApprovals}\n                    </span>\n                  )}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Bottom Actions */}\n      <div className=\"p-4 border-t border-slate-200\">\n        <Button \n          className=\"w-full\"\n          onClick={() => setLocation('/content-generator')}\n          data-testid=\"button-new-tweet\"\n        >\n          <i className=\"fas fa-plus text-sm mr-2\"></i>\n          New Tweet\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4131},"client/src/components/modals/schedule-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ScheduleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  tweetContent: any;\n  topicIds: string[];\n}\n\nexport default function ScheduleModal({ \n  isOpen, \n  onClose, \n  tweetContent,\n  topicIds \n}: ScheduleModalProps) {\n  const [scheduledDate, setScheduledDate] = useState('');\n  const [scheduledTime, setScheduledTime] = useState('');\n  const [repeatWeekly, setRepeatWeekly] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: twitterAccounts = [] } = useQuery({\n    queryKey: [\"/api/twitter/accounts\"],\n  });\n\n  const scheduleTweetMutation = useMutation({\n    mutationFn: async (tweetData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tweets\", tweetData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tweets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard-stats\"] });\n      toast({\n        title: \"Tweet Scheduled\",\n        description: \"Your tweet has been scheduled successfully!\",\n      });\n      onClose();\n      // Reset form\n      setScheduledDate('');\n      setScheduledTime('');\n      setRepeatWeekly(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Scheduling Failed\",\n        description: \"Failed to schedule tweet. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSchedule = () => {\n    if (!tweetContent) {\n      toast({\n        title: \"No Content\",\n        description: \"No content to schedule.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!scheduledDate || !scheduledTime) {\n      toast({\n        title: \"Missing Schedule\",\n        description: \"Please select both date and time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (twitterAccounts.length === 0) {\n      toast({\n        title: \"No Twitter Account\",\n        description: \"Please connect a Twitter account first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const scheduledFor = new Date(`${scheduledDate}T${scheduledTime}`);\n    const now = new Date();\n\n    if (scheduledFor <= now) {\n      toast({\n        title: \"Invalid Schedule\",\n        description: \"Please select a future date and time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    scheduleTweetMutation.mutate({\n      content: tweetContent.content,\n      twitterAccountId: twitterAccounts[0].id,\n      scheduledFor: scheduledFor.toISOString(),\n      status: 'scheduled',\n      approvalStatus: 'approved',\n      topics: topicIds,\n    });\n  };\n\n  const getMinDateTime = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  const getMinTime = () => {\n    const now = new Date();\n    const today = new Date().toDateString();\n    const selectedDay = new Date(scheduledDate).toDateString();\n    \n    if (today === selectedDay) {\n      const hours = String(now.getHours()).padStart(2, '0');\n      const minutes = String(now.getMinutes() + 1).padStart(2, '0');\n      return `${hours}:${minutes}`;\n    }\n    return '00:00';\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\" data-testid=\"schedule-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Schedule Tweet\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4\">\n          {/* Tweet Preview */}\n          {tweetContent && (\n            <div className=\"bg-slate-50 p-4 rounded-lg border\">\n              <Label className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                Tweet Preview\n              </Label>\n              <p className=\"text-sm text-slate-800\" data-testid=\"preview-content\">\n                {tweetContent.content}\n              </p>\n              <div className=\"flex justify-between mt-2 text-xs text-slate-500\">\n                <span>{tweetContent.character_count}/280 characters</span>\n                <span>Score: {tweetContent.engagement_score}/10</span>\n              </div>\n            </div>\n          )}\n          \n          {/* Date and Time Selection */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"schedule-date\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Date\n              </Label>\n              <Input\n                id=\"schedule-date\"\n                type=\"date\"\n                value={scheduledDate}\n                min={getMinDateTime()}\n                onChange={(e) => setScheduledDate(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"schedule-time\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Time\n              </Label>\n              <Input\n                id=\"schedule-time\"\n                type=\"time\"\n                value={scheduledTime}\n                min={scheduledDate ? getMinTime() : '00:00'}\n                onChange={(e) => setScheduledTime(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-time\"\n              />\n            </div>\n          </div>\n          \n          {/* Repeat Options */}\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"repeat-weekly\"\n              checked={repeatWeekly}\n              onCheckedChange={setRepeatWeekly}\n              data-testid=\"checkbox-repeat\"\n            />\n            <Label htmlFor=\"repeat-weekly\" className=\"text-sm text-slate-700\">\n              Repeat weekly\n            </Label>\n          </div>\n          \n          {repeatWeekly && (\n            <div className=\"text-xs text-slate-500 bg-blue-50 p-3 rounded\">\n              <i className=\"fas fa-info-circle mr-1\"></i>\n              This feature will be available in a future update.\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex space-x-3 pt-4 border-t\">\n          <Button \n            className=\"flex-1\"\n            onClick={handleSchedule}\n            disabled={scheduleTweetMutation.isPending}\n            data-testid=\"button-confirm-schedule\"\n          >\n            {scheduleTweetMutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Scheduling...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-calendar-plus mr-2\"></i>\n                Schedule Tweet\n              </>\n            )}\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={onClose}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7936},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}